{"A": {"type": "c", "charset": [">", "<", "+", "-", ".", ",", "[", "]"]}, "Alphuck": {"type": "c", "charset": ["a", "c", "e", "i", "j", "o", "p", "s"]}, "And_then": {"type": "w", "wordset": ["and", "then"]}, "ASCII_art": {"type": "c", "code1": "", "charset": ["_", "\\", "#", "/", "-", "|"," "]}, "ASCII_art-": {"type": "c", "charset": [">", "<", "+", "-", "[", "]", ".", ","]}, "BF-RLE": {"type": "c", "code1": "", "code2": "", "code3": "****+.=+*+*.", "charset": ["[", "0", "8", "3", "7", ".", "4", "2", "]", "=", "+", "*", "-", "1"]}, "BFFB": {"type": "c", "charset": ["[", "]", ">", "<", "+", "-", ".", ","]}, "Binaryfuck": {"type": "c", "code1": "00001000001101101101100111101000000010001000010000000000000000000000010010000000000010001000000010001101100 0000000000000000000000000000000000000000000100010100000000000100001001001001001001100001001001001001001001001100010000100010100", "charset": ["0", "1"]}, "Blub": {"type": "w", "code1": "Blub. Blub? Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub! Blub?Blub? Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub? Blub! Blub!Blub? Blub! Blub? Blub. Blub! Blub. Blub. Blub? Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub.Blub! Blub? Blub? Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub? Blub! Blub! Blub? Blub! Blub? Blub. Blub. Blub.Blub! Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub! Blub. Blub! Blub. Blub. Blub.Blub. Blub. Blub. Blub. Blub! Blub. Blub. Blub? Blub. Blub? Blub. Blub? Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub.Blub. Blub. Blub. Blub. Blub. Blub. Blub! Blub? Blub? Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub? Blub! Blub!Blub? Blub! Blub? Blub. Blub! Blub. Blub. Blub? Blub. Blub? Blub. Blub? Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub.Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub! Blub? Blub? Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub.Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub? Blub! Blub! Blub? Blub! Blub? Blub. Blub! Blub! Blub! Blub!Blub! Blub! Blub! Blub. Blub? Blub. Blub? Blub. Blub? Blub. Blub? Blub. Blub! Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub! Blub.Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub. Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub!Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub. Blub. Blub? Blub. Blub? Blub. Blub. Blub! Blub.", "code2": "Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub! Blub? Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub. Blub! Blub. Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub! Blub? Blub!", "wordset": ["Blub!", "Blub.", "Blub!Blub?", "Blub.Blub!", "Blub.Blub.", "Blub?Blub?", "Blub?", "Blub!Blub!"]}, "Braincrash": {"type": "c", "charset": ["!", " "]}, "BrainFNORD": {"type": "w", "wordset": ["23", "5", "pineal", "fnord", "kallisti", "chaos", "hail", "eris"]}, "Brainfoctal": {"type": "c", "charset": ["1", "2", "3", "4", "5", "6", "7", "0"]}, "Btjzxgquartfrqifjlv": {"type": "w", "wordset": ["btj", "zxg", "qua", "rtf", "rqi", "f", "j", "lv", "-", "."]}, "Colonoscopy": {"type": "c", "code1": ";;;};;{;;{;;{;;{;;;{;}};;};;;};;};;;};;};;;{;;};;};;;};{{;;{;}};;{;;;{;}};;};;};;;;};;};;;{;;;{;;;{;;;;};;;};;;};;;};;;};;;};;;};;;};;;;};;;;};;;};;;};;;};;;;};;};;};;;;};;{;;;{;;;;};;{;;;;};;;};;;};;;};;;;};;;{;;;{;;;{;;;{;;;{;;;{;;;;};;;{;;;{;;;{;;;{;;;{;;;{;;;{;;;{;;;;};;};;};;;};;;;};;};;;};;;};;;;};", "charset": [";", "{", "}"]}, "CompressedFuck": {"type": "c", "code1": "", "code2": "", "code3": "", "charset": ["x", "U", "1", "3", "f", "/", "\ufffd", "I", "R", "0", "L", "b", "=", "K", "C", "u", "y", "J", "6", "e", "D", "l", "A", "4"]}, "Ellipsis": {"type": "c", "charset": ["\u2026", "."]}, "Fluffle_Puff": {"type": "w", "wordset": ["b", "t", "pf", "bl", "!", "?", "*gasp*", "*pomf*"]}, "FuckbeEs": {"type": "c", "charset": ["f", "u", "c", "k", "b", "e", "E", "s"]}, "Fuckfuck": {"type": "w", "code1": "barb!!!!!!!!! able folk barb!!!!!! folk barb!!!!!!!!! folkbarb!! folk barb sing!!! teas bait folk barb! cask folk barb caskbarb!!!!!! cask! barb!! cask folk barb! cask sing! barb!!!!!!!!!!!!!!cask folk cask barb!! cask teas!!!!! cask teas!!!!!!! cask folk barbcask folk cask", "wordset": ["cask!", "barb!!!!!!!!!", "barb!!!!!!", "bait", "teas!!!!!", "cask", "folkbarb!!", "barb", "barb!!", "able", "folk", "caskbarb!!!!!!", "barb!", "barb!!!!!!!!!!!!!!cask", "barbcask", "sing!", "teas!!!!!!!", "sing!!!", "teas", "fuck", "shag", "boobs", "tits", "cock", "knob", "arse", "butt"]}, "LolKek": {"type": "c", "charset": ["+", "-", "1", "<", ">", "[", "]", ".", ",", "b", "=", "!", "a", "s", "?", "/", "\\", "~", "c", "p"]}, "MGIFOS": {"type": "c", "code1": "", "charset": ["*"]}, "Morsefuck": {"type": "c", "code1": ".-..-.--..-..-.--..-..-..----.------...--..-..-..---.--...-..-..-.--...--.--.....---..-..-..-..-..-.-.---...--..-..-..--.--.-..-..-..--.-.---..-.---.--...----.-----..-.--..-....--.--...--.-..-..-..-..-..-..-..-..-..-..-..-..-..-..-.-.--.---.-..-..-..--.--..-..-..-..-..-..-.--..-..-..-..-..-..-..-..-.-.--..--.-.--..--.-", "charset": ["-", "."]}, "Omam": {"type": "w", "code1": "hold your horses nowthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthough the truth may varysleep until the sun goes downthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranhold your horses nowdeep into the mountain soundthis ship will carrysleep until the sun goes downdon't listen to a word i sayhold your horses nowthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthough the truth may varysleep until the sun goes downthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranhold your horses nowdeep into the mountain soundthis ship will carrysleep until the sun goes downthrough the woods we randon't listen to a word i saythrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we randon't listen to a word i saydon't listen to a word i saythrough the woods we ranthrough the woods we ranthrough the woods we randon't listen to a word i sayhold your horses nowhold your horses nowhold your horses nowthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthough the truth may varysleep until the sun goes downthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranhold your horses nowdeep into the mountain soundthis ship will carrysleep until the sun goes downdon't listen to a word i sayhold your horses nowhold your horses nowhold your horses nowthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthough the truth may varysleep until the sun goes downthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranthrough the woods we ranhold your horses nowdeep into the mountain soundthis ship will carrysleep until the sun goes downdeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddon't listen to a word i saysleep until the sun goes downsleep until the sun goes downsleep until the sun goes downsleep until the sun goes downdon't listen to a word i saythrough the woods we ranthrough the woods we ranthrough the woods we randon't listen to a word i saydeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddon't listen to a word i saydeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddeep into the mountain sounddon't listen to a word i sayhold your horses nowhold your horses nowthrough the woods we randon't listen to a word i say", "code2": "the screams all sound the samethough the truth may varydon't listen to a word i saythe screams all sound the samethis ship will carry", "wordset": ["into", "listen", "i", "sun", "nowdeep", "say", "we", "varydon't", "samethis", "hold", "a", "downthrough", "horses", "varysleep", "saythrough", "sounddon't", "the", "until", "nowthrough", "sayhold", "word", "sound", "saydeep", "truth", "ranthough", "ranthrough", "ship", "all", "carry", "may", "nowhold", "downdeep", "soundthis", "saythe", "woods", "goes", "saydon't", "samethough", "randon't", "to", "ranhold", "downsleep", "screams", "will", "carrysleep", "downdon't", "sounddeep", "your", "mountain", "saysleep"]}, "Ook!": {"type": "w", "code1": "Ook? Ook!", "code2": "Ook! Ook?", "code3": "Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook.Ook! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook?Ook! Ook! Ook? Ook! Ook? Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook.Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.Ook? Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook. Ook! Ook.", "wordset": ["Ook.Ook?", "Ook.Ook.", "Ook?Ook!", "Ook!", "Ook!Ook!", "Ook?", "Ook.Ook!", "Ook."]}, "Pikalang": {"type": "w", "wordset": ["pipi", "pichu", "pi", "ka", "pikachu", "pikapi", "pika", "chu"]}, "POGAACK": {"type": "w", "wordset": ["pogack!", "pogaack!", "pogaaack!", "poock!", "pogack?", "pogaack?", "pogaaack?", "poock?"]}, "ReverseFuck": {"type": "c", "charset": ["-", "+", ">", "<", ".", ",", "]", "["]}, "RISBF": {"type": "c", "code1": "+++++++++//*+//*+++//------//--------//*+*+//*+//----", "charset": ["+", "-", "/", "*"]}, "Roadrunner": {"type": "w", "wordset": ["meeP", "Meep", "mEEp", "MeeP", "MEEP", "meep", "mEEP", "MEEp"]}, "RRF": {"type": "c", "charset": [">", "<", "+", "-", ".", ",", "[", "]"]}, "Ternary": {"type": "c", "charset": ["0", "1", "2"]}, "There_Once_was_a_Fish_Named_Fred": {"type": "w", "wordset": ["there", "once", "was", "a", "fish", "named", "Fred"]}, "TinyBF": {"type": "c", "charset": ["=", "+", ">", "|"]}, "Triplet": {"type": "w", "code1": "001 111 111 111 111 111 111 111 111 111 110 100 111 111 111 111 111 111 111 111 001 000 011 100010 001 111 111 111 111 111 111 111 110 100 111 111 111 111 001 000 011 100 111 010 111 111 111111 111 111 111 010 010 111 111 111 010 001 001 001 111 111 111 111 111 111 111 111 110 100 111111 111 111 001 000 011 100 010 001 001 001 111 111 111 111 111 111 111 111 111 111 110 100 111111 111 111 111 111 111 111 111 001 000 011 100 000 000 000 010 100 100 100 100 010 111 111 111010 000 000 000 000 000 000 010 000 000 000 000 000 000 000 000 010 001 001 111 010", "wordset": ["100", "110", "001", "111", "011", "100010", "000", "010", "111010", "111111"]}, "Unary": {"type": "c", "charset": ["0", "1"]}, "Unibrain": {"type": "w", "wordset": ["Baa", "BaaBaa", "BaaBaaBaa", "BaaBaaBaaBaa", "BaaBaaBaaBaaBaa", "BaaBaaBaaBaaBaaBaa", "BaaBaaBaaBaaBaaBaaBaa", "BaaBaaBaaBaaBaaBaaBaaBaa"]}, "VerboseFuck": {"type": "w", "code1": "math.equation(pointer = pointer - void(1));", "code2": "math.equation(pointer = pointer + void(1));", "code3": "math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));", "code4": "math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));", "code5": "define(defines.label, defines.label.createnew());", "code6": "conditional(block.if, boolean.inequality(deref(pointer), byte(0))) {", "code7": "};conditional(block.if, boolean.inequality(deref(pointer), byte(0))) { program.flow.labeledjump(defines.label.last()); };", "code8": "undefine(defines.label, defines.label.last());", "code9": "math.equation(deref(pointer) = programcode(conversion.changedatatype(program.console.standardoutput.stream.readunbufferedchars(1).getvalue(0), types.byte)));", "code10": "program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);", "code11": "program.initialize();math.equation(program.errors.handler.activated = boolean(false));program.console.standardinput.openstream();program.console.standardoutput.openstream();define(defines.variable, variable(pointer));implanttype(pointer, types.pointer(to:types.byte));math.equation(pointer = void(0));program.memory.allocate(pointer, void(math.infinity), program.memory.memorytype.bidirectional);", "code12": "program.memory.deallocate(pointer, void(math.infinity), program.memory.memorytype.bidirectional);undefine(defines.variable, variable(pointer));program.console.standardoutput.closestream();program.console.standardinput.closestream();program.terminate();", "code13": "~!comment!~DO INITIALIZATION ROUTINES~!uncomment!~program.initialize();math.equation(program.errors.handler.activated = boolean(false));program.console.standardinput.openstream();program.console.standardoutput.openstream();define(defines.variable, variable(pointer));implanttype(pointer, types.pointer(to:types.byte));math.equation(pointer = void(0));program.memory.allocate(pointer, void(math.infinity), program.memory.memorytype.bidirectional);~!comment!~END INITIALIZATION ROUTINES~!uncomment!~~!comment!~DO CAT PROGRAM~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));define(defines.label, defines.label.createnew());conditional(block.if, boolean.inequality(deref(pointer), byte(0))) {\tmath.equation(deref(pointer) = programcode(conversion.changedatatype(program.console.standardoutput.stream.readunbufferedchars(1).getvalue(0), types.byte)));\tprogram.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);};conditional(block.if, boolean.inequality(deref(pointer), byte(0))) {\tprogram.flow.labeledjump(defines.label.last());};undefine(defines.label, defines.label.last());~!comment!~END CAT PROGRAM~!uncomment!~~!comment!~DO CLEANUP AND TERMINATION~!uncomment!~program.memory.deallocate(pointer, void(math.infinity), program.memory.memorytype.bidirectional);undefine(defines.variable, variable(pointer));program.console.standardoutput.closestream();program.console.standardinput.closestream();program.terminate();~!comment!~END CLEANUP AND TERMINATION~!uncomment!~", "code14": "~!comment!~MANDATORY~!uncomment!~program.initialize();math.equation(program.errors.handler.activated = boolean(false));program.console.standardinput.openstream();program.console.standardoutput.openstream();define(defines.variable, variable(pointer));implanttype(pointer, types.pointer(to:types.byte));math.equation(pointer = void(0));program.memory.allocate(pointer, void(math.infinity), program.memory.memorytype.bidirectional);~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));define(defines.label, defines.label.createnew());conditional(block.if, boolean.inequality(deref(pointer), byte(0))) { \tmath.equation(pointer = pointer + void(1));\t~!comment!~MANDATORY~!uncomment!~\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\t~!comment!~MANDATORY~!uncomment!~\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(pointer = pointer + void(1));\t~!comment!~MANDATORY~!uncomment!~\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\t~!comment!~MANDATORY~!uncomment!~\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\t~!comment!~MANDATORY~!uncomment!~\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(pointer = pointer + void(1));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\t~!comment!~MANDATORY~!uncomment!~\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\tmath.equation(pointer = pointer + void(1));\tmath.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));\t~!comment!~MANDATORY~!uncomment!~\tmath.equation(pointer = pointer - void(1));\tmath.equation(pointer = pointer - void(1));\tmath.equation(pointer = pointer - void(1));\tmath.equation(pointer = pointer - void(1));\t~!comment!~MANDATORY~!uncomment!~\tmath.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));};conditional(block.if, boolean.inequality(deref(pointer), byte(0))) { \tprogram.flow.labeledjump(defines.label.last());};undefine(defines.label, defines.label.last());math.equation(pointer = pointer + void(1));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);math.equation(pointer = pointer + void(1));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);math.equation(pointer = pointer + void(1));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);math.equation(pointer = pointer - void(1));math.equation(pointer = pointer - void(1));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);~!comment!~MANDATORY~!uncomment!~math.equation(pointer = pointer + void(1));program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer) = (deref(pointer) - byte(1)):binaryand:byte(255));program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);math.equation(pointer = pointer + void(1));math.equation(deref(pointer) = (deref(pointer) + byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);math.equation(pointer = pointer + void(1));program.console.standardoutput.stream.writeunbufferedchars(array.create(1, conversion.changedatatype(deref(pointer), types.character, conversion.method.binary)), 0, 1);~!comment!~MANDATORY~!uncomment!~program.memory.deallocate(pointer, void(math.infinity), program.memory.memorytype.bidirectional);undefine(defines.variable, variable(pointer));program.console.standardoutput.closestream();program.console.standardinput.closestream();program.terminate();~!comment!~MANDATORY~!uncomment!~", "wordset": ["defines.label.createnew());conditional(block.if,", "undefine(defines.label,", "program.flow.labeledjump(defines.label.last());", "-", "~!comment!~DO", "1);math.equation(pointer", "1);~!comment!~MANDATORY~!uncomment!~math.equation(pointer", "void(1));program.console.standardoutput.stream.writeunbufferedchars(array.create(1,", "programcode(conversion.changedatatype(program.console.standardoutput.stream.readunbufferedchars(1).getvalue(0),", "byte(1)):binaryand:byte(255));define(defines.label,", "defines.label.last());~!comment!~END", "pointer", "math.equation(deref(pointer)", "AND", "ROUTINES~!uncomment!~~!comment!~DO", "};conditional(block.if,", "program.memory.memorytype.bidirectional);undefine(defines.variable,", "program.memory.memorytype.bidirectional);~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer)", "byte(0)))", "variable(pointer));program.console.standardoutput.closestream();program.console.standardinput.closestream();program.terminate();~!comment!~MANDATORY~!uncomment!~", "types.byte)));", "program.memory.memorytype.bidirectional);~!comment!~END", "void(0));program.memory.allocate(pointer,", "byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~program.console.standardoutput.stream.writeunbufferedchars(array.create(1,", "program.memory.deallocate(pointer,", "void(1));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer)", "1);~!comment!~MANDATORY~!uncomment!~program.memory.deallocate(pointer,", "variable(pointer));program.console.standardoutput.closestream();program.console.standardinput.closestream();program.terminate();~!comment!~END", "TERMINATION~!uncomment!~program.memory.deallocate(pointer,", "program.console.standardoutput.stream.writeunbufferedchars(array.create(1,", "byte(1)):binaryand:byte(255));};conditional(block.if,", "byte(1)):binaryand:byte(255));math.equation(deref(pointer)", "defines.label.last());", "void(1));math.equation(deref(pointer)", "conversion.changedatatype(deref(pointer),", "boolean.inequality(deref(pointer),", "~!comment!~MANDATORY~!uncomment!~", "1);math.equation(deref(pointer)", "conditional(block.if,", "PROGRAM~!uncomment!~math.equation(deref(pointer)", "1);", "=", "define(defines.label,", "byte(1)):binaryand:byte(255));", "math.equation(pointer", "1);};conditional(block.if,", "{", "byte(1)):binaryand:byte(255));program.console.standardoutput.stream.writeunbufferedchars(array.create(1,", "defines.label.last());math.equation(pointer", "boolean(false));program.console.standardinput.openstream();program.console.standardoutput.openstream();define(defines.variable,", "};", "CLEANUP", "CAT", "program.initialize();math.equation(program.errors.handler.activated", "types.pointer(to:types.byte));math.equation(pointer", "void(math.infinity),", "1);program.console.standardoutput.stream.writeunbufferedchars(array.create(1,", "(deref(pointer)", "INITIALIZATION", "conversion.method.binary)),", "+", "variable(pointer));program.console.standardoutput.closestream();program.console.standardinput.closestream();program.terminate();", "byte(1)):binaryand:byte(255));~!comment!~MANDATORY~!uncomment!~math.equation(deref(pointer)", "defines.label.createnew());", "~!comment!~MANDATORY~!uncomment!~program.initialize();math.equation(program.errors.handler.activated", "types.character,", "void(1));", "program.flow.labeledjump(defines.label.last());};undefine(defines.label,", "TERMINATION~!uncomment!~", "ROUTINES~!uncomment!~program.initialize();math.equation(program.errors.handler.activated", "program.memory.memorytype.bidirectional);", "0,", "PROGRAM~!uncomment!~~!comment!~DO", "void(1));math.equation(pointer", "variable(pointer));implanttype(pointer,"]}, "Wepmlrio": {"type": "c", "charset": ["w", "e", "p", "m", "l", "r", "I", "o", ".", "-", " "]}}
